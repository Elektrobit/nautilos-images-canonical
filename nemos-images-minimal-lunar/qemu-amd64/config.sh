#!/bin/bash -ex
#================
# FILE          : config.sh
#----------------
# PROJECT       : NemOS
# COPYRIGHT     : (c) 2023 Canonical Ltd.
#                 (c) 2023 Elektrobit Automotive GmbH
#               :
# CONTACT       : NemOS Team nemos-team@lists.launchpad.net
#               :
# BELONGS TO    : Operating System images
#               :
# DESCRIPTION   : OS configuration script
#               :
#               :
# STATUS        : Production
# GENERATED BY  : keg 2.1.1 on 2023-10-19 07:23:26
#----------------
#======================================
# Functions...
#--------------------------------------
test -f /.kconfig && . /.kconfig
test -f /.profile && . /.profile

#======================================
# Greeting...
#--------------------------------------
echo "Configure image: [$kiwi_iname]..."
# keg: included from systemd-journald
cat > "/etc/systemd/journald.conf" <<EOF
[Journal]
Storage=volatile
ForwardToSyslog=no
EOF

# keg: included from dracut-virtio
cat > "/etc/dracut.conf.d/50-virtio.conf" <<EOF
force_drivers+=" virtio virtio_net virtio_blk virtio_scsi virtio_rng virtio_dma_buf virtio_pci "
EOF

# keg: included from serial
cat > "/etc/systemd/system/serial-getty@ttyAMA0.service.d/override.conf" <<EOF
[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty --autologin root --noclear --keep-baud 115200,38400,9600 ttyAMA0 $TERM
EOF
cat > "/etc/systemd/system/serial-getty@hvc0.service.d/override.conf" <<EOF
[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty --autologin root --noclear --keep-baud 115200,38400,9600 hvc0 $TERM
EOF

# keg: included from disable-selinux
cat > "/etc/grub.d/01_fix_linuxefi" <<EOF
#!/bin/sh

# Override Kiwi's template which tries to boot with the linuxefi command,
# which doesn't exist in GRUB 2.12

echo "set linux=linux"
echo "set initrd=initrd"
EOF

# keg: included from dracut-efi-pstore
cat > "/etc/dracut.conf.d/51-efi-pstore.conf" <<EOF
force_drivers+=" efi-pstore "
EOF

# keg: included from watchdog
cat > "/etc/systemd/system.conf.d/watchdog.conf" <<EOF
[Manager]
WatchdogDevice=/dev/watchdog0
RuntimeWatchdogSec=10
EOF

# keg: included from admin-user
cat > "/etc/polkit-1/localauthority/10-vendor.d/admin-org.freedesktop.login1.pkla" <<EOF
[Admin - Power off the system]
Identity=unix-user:admin
Action=org.freedesktop.login1.power-off
ResultAny=yes

[Admin - Reboot the system]
Identity=unix-user:admin
Action=org.freedesktop.login1.reboot
ResultAny=yes

[Admin - Halt the system]
Identity=unix-user:admin
Action=org.freedesktop.login1.halt
ResultAny=yes
EOF
cat > "/etc/sudoers" <<EOF
Defaults always_set_home
Defaults secure_path="/usr/sbin:/usr/bin:/sbin:/bin"
Defaults env_reset
Defaults env_keep = "LANG LC_ADDRESS LC_CTYPE LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE LC_ATIME LC_ALL LANGUAGE LINGUAS XDG_SESSION_COOKIE"
Defaults !insults
Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
Defaults targetpw   # ask for the password of the target user i.e. root
ALL   ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'!
root ALL=(ALL) ALL
admin ALL=(ALL) NOPASSWD: ALL
EOF

# keg: included from dracut-common
cat > "/etc/dracut.conf.d/50-common.conf" <<EOF
force_drivers+=" squashfs nls_iso8859-1 binfmt_misc overlay "
add_dracutmodules+=" bash "
EOF

# keg: included from sysctl
cat > "/etc/sysctl.d/50-kernel-kptr-restrict.conf" <<EOF
kernel.kptr_restrict=1
EOF
cat > "/etc/sysctl.d/50-randomize-va-space.conf" <<EOF
kernel.randomize_va_space=2
EOF
cat > "/etc/sysctl.d/50-vm-overcommit.conf" <<EOF
vm.overcommit_memory=2
EOF
cat > "/etc/sysctl.d/50-yama-ptrace-scope.conf" <<EOF
kernel.yama.ptrace_scope=1
EOF

# keg: included from netplan
cat > "/etc/netplan/00-netplan.yaml" <<EOF
network:
version: 2
renderer: networkd
ethernets:
  lan0:
    match:
      driver: virtio_net
    set-name: lan0
    dhcp4: true
    dhcp6: true
    optional: false
EOF

# keg: included from common
#==================================
# Delete initrd from kernel
#----------------------------------
# The kernel package provides some arbitrary initrd
rm -f /boot/initrd*
rm -f /boot/vmlinuz.old

#==================================
# Delete data not needed or wanted
#----------------------------------
rm -rf /var/backups
rm -rf /usr/share/man
rm -rf /usr/lib/*/gconv

#==================================
# Delete docs but retain copyright notices
#----------------------------------
find /usr/share/doc/ ! -iname copyright -delete 2> /dev/null || true

#==================================
# Allow suid tools with busybox
#----------------------------------
chmod u+s /usr/bin/busybox

#=======================================
# Update OS information
#---------------------------------------
echo "VARIANT=\"NemOS\"" >> /usr/lib/os-release
echo "VARIANT_ID=\"nemos\"" >> /usr/lib/os-release
echo "IMAGE_ID=\"${kiwi_iname}\"" >> /usr/lib/os-release
echo "IMAGE_VERSION=\"${kiwi_iversion}\"" >> /usr/lib/os-release
echo "BUILD_ID=\"$(date -I -u)\"" >> /usr/lib/os-release
echo "NEMOS_HOME_URL=\"https://launchpad.net/nemos\"" >> /usr/lib/os-release
echo "NEMOS_BUG_REPORT_URL=\"https://bugs.launchpad.net/nemos\"" >> /usr/lib/os-release

# keg: included from snapd
#======================================
# Install snapd and bootstrap snaps
#--------------------------------------

# The list of profiles is comma separated; change them to spaces to iterate
# over them.
for profile in ${kiwi_profiles//,/ }; do
    if [ "${profile}" = "development" ]; then
        # Use the preseeding feature of snapd to preload some snaps into the
        # system. This will download the snaps from the global Snap Store, copy
        # them to the snapd seed directory, and add each to the preseed YAML
        # file to instruct snapd to install them on first boot.
        # This requires network access to the Snap Store in Kiwi.
        mkdir -p /var/lib/snapd/seed
        echo "snaps": > /var/lib/snapd/seed/seed.yaml
        for snap in snapd checkbox22 checkbox core22; do
            snap download $snap
            # Add this new snap to the list of seeded snaps
            cat >> /var/lib/snapd/seed/seed.yaml << EOF
  - name: ${snap}
    channel: latest/stable
    file: $(ls ${snap}_*.snap)
EOF
            # Checkbox snap requires classic confinement mode
            if [ "${snap}" = "checkbox" ]; then
                cat >> /var/lib/snapd/seed/seed.yaml << EOF
    classic: true
EOF
            fi
        done

        # Copy the snap archives
        install -Dm0644 *.snap -t /var/lib/snapd/seed/snaps/
        # Copy the snap assertions (cryptographic signatures)
        install -Dm0644 *.assert -t /var/lib/snapd/seed/assertions/

        # Install the generic snapd model assertion so that the snaps can
        # be verified and snapd properly initialised.
        snap known --remote model series=16 brand-id=generic \
            model=generic-classic > /var/lib/snapd/seed/assertions/model
    fi
done

rm -f *.snap *.assert
